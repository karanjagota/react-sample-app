{"version":3,"sources":["components/Header.js","components/Body.js","components/Next_page.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","React","Component","name_array","Body","state","names","text_val","handle_change","event","_this","setState","target","value","map","person","key","this","type","onChange","concat","react_router_dom","to","NextPage","Footer","style","footer_style","color","fontSize","position","bottom","width","backgroundColor","App","className","react_router","path","render","components_Header","exact","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAceA,mLAVP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uEAJKC,IAAMC,WCCrBC,EAAa,CAAC,QAAQ,SAAS,QAAQ,UAAU,UAAU,QAAQ,QAAQ,SAuClEC,6MAnCXC,MAAQ,CACJC,MAAMH,EACNI,SAAS,MAEbC,cAAgB,SAACC,GACbC,EAAKC,SAAS,CAACJ,SAASE,EAAMG,OAAOC,iFAIrC,OACIf,EAAAC,EAAAC,cAAA,oEAEIF,EAAAC,EAAAC,cAAA,iDAAyC,GAAzC,KACAF,EAAAC,EAAAC,cAAA,qCACKG,EAAWW,IAAI,SAACC,GACb,OAAOjB,EAAAC,EAAAC,cAAA,MAAIgB,IAAKD,GAAT,IAAmBA,MAGlCjB,EAAAC,EAAAC,cAAA,0DACiDF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAClDiB,KAAKZ,MAAMC,OAEfR,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,OAAOL,MAAOI,KAAKZ,MAAME,SAAUY,SAAUF,KAAKT,iBAbtE,+BAAAY,OAewCH,KAAKZ,MAAME,UAAWT,EAAAC,EAAAC,cAAA,WAC1DF,EAAAC,EAAAC,cAAA,sDAA6CF,EAAAC,EAAAC,cAAA,WACzCF,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAMC,GAAG,aAAT,kDA7BDrB,IAAMC,WCSVqB,mLAVP,OACIzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uFAJOC,IAAMC,WCAvBsB,mLAEE,OACI1B,EAAAC,EAAAC,cAAA,UAAQyB,MAAOC,GAAf,yEAHSzB,IAAMC,WAQrBwB,EAAe,CACjBC,MAAM,QACNC,SAAS,OACTC,SAAS,QACTC,OAAO,IACPC,MAAM,OACNC,gBAAiB,WAGNR,ICGAS,mLAZb,OACEnC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,OACbpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAQ,kBACtBvC,EAAAC,EAAAC,cAACsC,EAAD,SAEFxC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOI,OAAK,EAACH,KAAM,IAAII,UAAWpC,IAClCN,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOI,OAAK,EAACH,KAAK,YAAYI,UAAWjB,IACzCzB,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,KAAO,IAAII,UAAWhB,YATjBvB,IAAMC,WCIJuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAST,OAAOvC,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KAAYvB,EAAAC,EAAAC,cAAC+C,EAAD,OAAsBC,SAASC,eAAe,SD0HpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.97704cb8.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component{\n    render(){\n        return(\n            <div>\n                <h1> \n                    Hello From Karan!! Welcome to My post on React :) \n                </h1>                \n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst name_array = ['Karan','Gaurav','Anoop','Rishika','Natasha','Akhil','Sahil','Akash'];\n\nclass Body extends React.Component{    \n\n    state = {\n        names:name_array,\n        text_val:''\n    } \n    handle_change = (event)=>{\n        this.setState({text_val:event.target.value})\n    }\n\n    render(){\n        return(\n            <div>\n                This is the body of our app . Put anything in here ...\n                <p>Put JS inside the curly Bracket like {5+5} </p>     \n                <p> Loop thenm over like ... \n                    {name_array.map((person)=>{\n                        return <ol key={person}> {person}</ol>\n                    })}\n                </p>\n                <p> \n                   we can also access elements from the state ...<br/><br/> \n                   {this.state.names} \n                </p>\n                <form>\n                    <input type=\"text\" value={this.state.text_val} onChange={this.handle_change}/>\n                </form>\n                    {`state : text_val value is = ${this.state.text_val}`}<br/>\n                <p>Now you can see how powerfull react is !! <br/>\n                    <Link to=\"/nextpage\"> Clcik this to go onto next page ... </Link>\n                </p>\n                \n            </div>\n        );\n    }\n}\n\nexport default Body;","import React from 'react';\n\nclass NextPage extends React.Component{\n    render(){\n        return(\n            <div>\n                <p>\n                    this is the second page / Component of the app ... with Router ... \n                </p>\n            </div>\n        );\n    }\n}\n\nexport default NextPage;","import React from 'react';\n\nclass Footer extends React.Component{\n    render(){\n        return (\n            <footer style={footer_style}> This is the Footer of our React App. Put Anythin you want !! </footer> \n        );\n    }\n}\n\nconst footer_style = {\n    color:'green',\n    fontSize:'35px',\n    position:'fixed',\n    bottom:'0',\n    width:'100%',\n    backgroundColor: '#D3D3D3',\n};\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Body from './components/Body';\nimport NextPage from './components/Next_page';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n  render(){\n  return (\n    <div className='App'>\n      <Route path=\"/\" render={()=>(\n        <Header/>\n      )}/>\n      <Route exact path =\"/\" component={Body}/>\n      <Route exact path=\"/nextpage\" component={NextPage}/>\n      <Route path = \"/\" component={Footer}/>\n    </div>  \n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}